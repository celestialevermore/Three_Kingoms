/**
	불이난 지형을 지나갈 때의 피해량을 계산합니다.
	@param unit 부대
	@param pos 지나갈 좌표
*/
int PK_불피해량(Unit unit, Point pos)
{
	if (unit.hasSkill(특기_화신))
		return 0;

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/*
	int n = 50 + rand(50);
	*/
	int n = std::max(unit.병력 * 1 / 100, 50) + rand(50);
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	if (unit.hasSkill(특기_등갑))
		n *= 2;

	return n;
}

/**
	독천 지형을 지나갈 때의 피해량을 계산합니다.
	@param unit 부대
	@param pos 지나갈 좌표
*/
int PK_독천피해량(Unit unit, Point pos)
{
	if (unit.hasSkill(특기_해독))
		return 0;

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/*
	return 200 + rand(200);
	*/
	return std::max(unit.병력 * 4 / 100, 200) + rand(200);
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
}

/**
	벼랑길 지형을 지나갈 때의 피해량을 계산합니다.
	@param unit 부대
	@param pos 지나갈 좌표
*/
int PK_벼랑길피해량(Unit unit, Point pos)
{
	if (unit.hasSkill(특기_답파) || unit.hasTech(기교_난소행군))
		return 0;

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	/*
	return 100 + rand(200);
	*/
	return std::max(unit.병력 * 2 / 100, 100) + rand(200);
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
}